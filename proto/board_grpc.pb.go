// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package board

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoardApiClient is the client API for BoardApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardApiClient interface {
	// Sends a greeting
	Putable(ctx context.Context, in *Board, opts ...grpc.CallOption) (*Res, error)
	Reverse(ctx context.Context, in *Board, opts ...grpc.CallOption) (*Res, error)
}

type boardApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardApiClient(cc grpc.ClientConnInterface) BoardApiClient {
	return &boardApiClient{cc}
}

func (c *boardApiClient) Putable(ctx context.Context, in *Board, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/board.BoardApi/Putable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardApiClient) Reverse(ctx context.Context, in *Board, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/board.BoardApi/Reverse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardApiServer is the server API for BoardApi service.
// All implementations must embed UnimplementedBoardApiServer
// for forward compatibility
type BoardApiServer interface {
	// Sends a greeting
	Putable(context.Context, *Board) (*Res, error)
	Reverse(context.Context, *Board) (*Res, error)
	mustEmbedUnimplementedBoardApiServer()
}

// UnimplementedBoardApiServer must be embedded to have forward compatible implementations.
type UnimplementedBoardApiServer struct {
}

func (UnimplementedBoardApiServer) Putable(context.Context, *Board) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Putable not implemented")
}
func (UnimplementedBoardApiServer) Reverse(context.Context, *Board) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reverse not implemented")
}
func (UnimplementedBoardApiServer) mustEmbedUnimplementedBoardApiServer() {}

// UnsafeBoardApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardApiServer will
// result in compilation errors.
type UnsafeBoardApiServer interface {
	mustEmbedUnimplementedBoardApiServer()
}

func RegisterBoardApiServer(s grpc.ServiceRegistrar, srv BoardApiServer) {
	s.RegisterService(&BoardApi_ServiceDesc, srv)
}

func _BoardApi_Putable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Board)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardApiServer).Putable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.BoardApi/Putable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardApiServer).Putable(ctx, req.(*Board))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardApi_Reverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Board)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardApiServer).Reverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.BoardApi/Reverse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardApiServer).Reverse(ctx, req.(*Board))
	}
	return interceptor(ctx, in, info, handler)
}

// BoardApi_ServiceDesc is the grpc.ServiceDesc for BoardApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoardApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "board.BoardApi",
	HandlerType: (*BoardApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Putable",
			Handler:    _BoardApi_Putable_Handler,
		},
		{
			MethodName: "Reverse",
			Handler:    _BoardApi_Reverse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "board/board.proto",
}
